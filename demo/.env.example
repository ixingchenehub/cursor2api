# ===================================
# CursorWeb2API Configuration Example
# ===================================
# Copy this file to .env and configure your values

# API Authentication
API_KEY=your_secure_api_key_here

# Model Configuration
MODELS=claude-3.5-sonnet,gpt-4,gpt-4-turbo-preview

# Network Configuration
PROXY=
TIMEOUT=300

# Feature Flags
ENABLE_FUNCTION_CALLING=false
COMPRESSION_ENABLED=true
COMPRESSION_RESERVE_RATIO=0.2

# Token Limits
MAX_TOKENS=200000

# Fingerprint Configuration
SCRIPT_URL=https://cursor.com/149e9513-01fa-4fb0-aad4-566afd725d1b/2d206a39-8ed7-437e-a3be-862e0f06eea3/a-4-a/c.js?i=0&v=3&h=cursor.com
X_IS_HUMAN_SERVER_URL=

# Prompt Injection (Optional)
SYSTEM_PROMPT_INJECT=
USER_PROMPT_INJECT=

# ===================================
# Resilience Engine Configuration
# ===================================
# These settings control retry, circuit breaker, and rate limiting behavior

# Retry Strategy
# Maximum number of retry attempts for failed requests
RESILIENCE_MAX_RETRIES=5

# Initial delay between retries (in seconds)
RESILIENCE_BASE_DELAY=1.0

# Maximum delay between retries (in seconds)
# Prevents exponential backoff from growing too large
RESILIENCE_MAX_DELAY=32.0

# Circuit Breaker Settings
# Number of consecutive failures before opening the circuit
# When circuit opens, requests fail fast without attempting the call
RESILIENCE_CIRCUIT_FAILURE_THRESHOLD=5

# Time to wait before attempting to close the circuit (in seconds)
# After this timeout, circuit enters HALF_OPEN state for testing
RESILIENCE_CIRCUIT_TIMEOUT=60

# Rate Limiter Settings
# Maximum number of concurrent requests allowed (token bucket capacity)
RESILIENCE_RATE_LIMIT_TOKENS=10

# Rate at which tokens are refilled (tokens per second)
# Higher value = more aggressive, lower value = more conservative
RESILIENCE_RATE_LIMIT_REFILL=2.0

# ===================================
# Production Deployment Recommendations
# ===================================
# For high-traffic production environments:
# - RESILIENCE_MAX_RETRIES: 3-5 (balance between reliability and latency)
# - RESILIENCE_BASE_DELAY: 1.0 (fast initial retry)
# - RESILIENCE_MAX_DELAY: 32.0 (prevent excessive wait times)
# - RESILIENCE_CIRCUIT_FAILURE_THRESHOLD: 5 (protect upstream services)
# - RESILIENCE_CIRCUIT_TIMEOUT: 60 (give services time to recover)
# - RESILIENCE_RATE_LIMIT_TOKENS: 10-20 (match your server capacity)
# - RESILIENCE_RATE_LIMIT_REFILL: 2.0-5.0 (based on upstream rate limits)

# For development/testing environments:
# - Use lower values to fail fast and identify issues quickly
# - RESILIENCE_MAX_RETRIES: 2
# - RESILIENCE_CIRCUIT_FAILURE_THRESHOLD: 3

# ===================================
# Monitoring & Observability
# ===================================
# View real-time resilience metrics at:
# GET /metrics/resilience
# 
# Key metrics:
# - total_requests: Total API calls attempted
# - successful_requests: Successfully completed calls
# - failed_requests: Failed calls (after all retries)
# - retries_count: Total number of retries performed
# - success_rate: Percentage of successful requests
# - circuit_breaker_state: Current circuit state (CLOSED/OPEN/HALF_OPEN)
# - rate_limiter_tokens: Available tokens for new requests

# ===================================
# Browser Fingerprint Generation API
# ===================================
# New API endpoint: POST /v1/fingerprint/generate
# Generates browser fingerprints based on specified mode
#
# Request Body:
# {
#   "mode": "current" | "desktop" | "mobile" | "any"
# }
#
# Response:
# {
#   "fingerprint": {
#     "userAgent": "...",
#     "platform": "...",
#     "webgl": {...},
#     "canvas": "...",
#     "audio": "...",
#     "screen": {...},
#     "hardware": {...}
#   },
#   "base64": "eyJ1c2VyQWdlbnQiOi..."
# }
#
# Generation Modes:
# - current: Uses the FP configuration from environment variable
# - desktop: Generates random desktop browser fingerprint
# - mobile: Generates random mobile browser fingerprint  
# - any: Randomly selects from all available fingerprints
#
# Authentication:
# Requires Bearer token authentication using the API_KEY configured above
#
# Usage Example:
# curl -X POST http://localhost:8000/v1/fingerprint/generate \
#   -H "Authorization: Bearer your_api_key_here" \
#   -H "Content-Type: application/json" \
#   -d '{"mode": "desktop"}'
#
# The returned base64 string can be directly used as the FP parameter
# for subsequent API calls requiring browser fingerprint data.

# FP Configuration (Base64 encoded JSON)
# This is used when mode="current" in fingerprint generation
# Contains the base fingerprint configuration for the service
FP=eyJ1c2VyQWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTMxLjAuMC4wIFNhZmFyaS81MzcuMzYiLCJwbGF0Zm9ybSI6IldpbjMyIiwid2ViZ2wiOnsidmVuZG9yIjoiR29vZ2xlIEluYy4gKEludGVsKSIsInJlbmRlcmVyIjoiQU5HTEUgKEludGVsLCBJbnRlbChSKSBVSEQgR3JhcGhpY3MgNjMwIChb3D7eNzg5MC4xMDEuMTAwMCkgRGlyZWN0M0QxMSB2c181XzAgcHNfNV8wLCBEMz1ERTExKSJ9LCJjYW52YXMiOiJhYmNkZWYxMjM0NTY3ODkwIiwiYXVkaW8iOiIxMjMuNDU2Nzg5MDEyIiwic2NyZWVuIjp7IndpZHRoIjoxOTIwLCJoZWlnaHQiOjEwODAsImF2YWlsV2lkdGgiOjE5MjAsImF2YWlsSGVpZ2h0IjoxMDQwLCJjb2xvckRlcHRoIjoyNCwicGl4ZWxEZXB0aCI6MjQsInBpeGVsUmF0aW8iOjF9LCJoYXJkd2FyZSI6eyJtYXhUb3VjaFBvaW50cyI6MCwiY3B1Q29yZXMiOjgsIm1lbW9yeSI6OH19